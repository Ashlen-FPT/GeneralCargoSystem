@model GeneralCargoSystem.Models.GC.GCBooking

@{
    ViewData["Title"] = "Booking Details";
}
<style>
    .row {
        padding-bottom: 15px;
    }

    #detailsPage {
        padding-top: 60px;
    }

    .my-validation-message::before {
        display: none;
    }

    .my-validation-message i {
        margin: 0 .4em;
        color: #f27474;
        font-size: 1.4em;
    }


    @@media print {
        body * {
            visibility: hidden;
        }

        #heading{
            text-align:center;
        }
        #section-to-print, #section-to-print * {
            visibility: visible;
        }

        #section-to-print {
            position: center;
            left: 0;
            top: 0;
            border: 10px solid #000;
        }

        #actionBtns {
            display: none;
        }

        @@page {
            size: auto;
            margin: 0;
        }
        
    }
</style>
<center><h1>General Cargo Trucking Booking Details</h1></center>
<div id="detailsPage">
    <div class="card">

        <div class="card-body" id="section-to-print">
          
            <h4 id="heading">General Cargo Booking ~ @Model.BookingReference</h4>
            <hr />
            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>@Html.DisplayNameFor(model => model.Date) :</b>
                    @Model.Date.ToString("dd MMMM yyyy")
                </div>

                <div class="form-group col-sm-4 mx-auto">
                    <b>Booking Time :</b>
                    @Html.DisplayFor(model => model.Time)
                </div>
            </div>

            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>  FPT Site :</b>
                    @Html.DisplayFor(model => model.FPTSites.SiteLocation)
                </div>

                <div class="form-group col-sm-4 mx-auto">
                    <b>@Html.DisplayNameFor(model => model.VesselId) :</b>
                    @Html.DisplayFor(model => model.Vessels.VesselName)
                </div>
            </div>
            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>Logistical Transporter :</b>
                    @Html.DisplayFor(model => model.LogisticalTransporter.Name)
                </div>

                <div class="form-group col-sm-4 mx-auto">
                    <b>Transport Registration :</b>
                    @Html.DisplayFor(model => model.Registration)
                </div>
            </div>
            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>@Html.DisplayNameFor(model => model.Commodity) :</b>
                    @Html.DisplayFor(model => model.Commodity.CommodityItem)
                </div>

                <div class="form-group col-sm-4 mx-auto">
                    <b>@Html.DisplayNameFor(model => model.Quantity) :</b>
                    @Html.DisplayFor(model => model.Quantity)
                </div>
            </div>

            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>  @Html.DisplayNameFor(model => model.Name) :</b>
                    @Html.DisplayFor(model => model.Name)
                </div>

                <div class="form-group col-sm-4 mx-auto">
                    <b>@Html.DisplayNameFor(model => model.PhoneNumber) :</b>
                    @Html.DisplayFor(model => model.PhoneNumber)
                </div>
            </div>

            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>  Email Address :</b>
                    @Html.DisplayFor(model => model.Email)
                </div>

                <div class="form-group col-sm-4 mx-auto">
                    <b>  @Html.DisplayNameFor(model => model.Comments) :</b>
                    @Html.DisplayFor(model => model.Comments)
                </div>
            </div>

            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>  @Html.DisplayNameFor(model => model.CreatedOn) :</b>
                    @Model.CreatedOn.ToString("dd MMMM yyyy  hh:mm:ss")
                </div>

                <div class="form-group col-sm-4 mx-auto">
                    <b> Created By  :</b>
                    @Html.DisplayFor(model => model.CreatedBy)
                </div>
            </div>
            <div class="row">
                <div class="form-group col-sm-4 mx-auto">
                    <b>  @Html.DisplayNameFor(model => model.Trade) :</b>
                    @Html.DisplayFor(model => model.Trade)
                </div>

                <div class="form-group col-sm-4 mx-auto">
                </div>
            </div>
            <div style="float:right;" id="actionBtns">
                <a class="btn btn-dark active" onclick="window.print()"> <i class="fa fa-1x fa-print"></i> Print Details</a>
                <a class="btn btn-info active" onclick="sendEmail()"> <i class="fa fa-1x fa-share"></i> Share Via Email</a>
            </div>
        </div>
    </div>


</div>
<script>
    function sendEmail() {

        swal.fire({
            title: 'Type email address',
            input: 'text',
            inputPlaceholder: 'Email Address',
            confirmButtonText: 'Send',
            showCancelButton: true,
            customClass: {
                validationMessage: 'my-validation-message'
            },
            preConfirm: (result) => {
                if (!result) {
                    Swal.showValidationMessage(
                        '<i class="fa fa-info-circle"></i> Email address is required'
                    )
                }
            }
        }).then((result) => {
            if (!result.isConfirmed) {
                swal.close();
                return null;
            };

            var uri = "/GCCustomer/GCBookings/SendViaEmail?id=" + @Model.Id + "&email=" + result.value;
            var res = encodeURI(uri);
            $.ajax({
                url: res,
                success: function (response) {
                    swal.close();
                    swal.fire({
                        title: "Email Sent!",
                        text: "Booking details sent to recipient ",
                        icon: "success",
                        confirmButtonText: "Okay",
                    });
                },
                error: function () {
                    swal.fire({
                        title: "Error!",
                        text: " Please try again! , only organizational emails allowed",
                        icon: "warning",
                        confirmButtonText: "Okay",
                    });
                }
            });
        });
    }
</script>


